<?php
// $Id$

/**
 * @file
 * SMS Panel hooks implementations and helper API functions.
 */

/**
 * Module constants.
 * Defines placeholders for SMS message direction.
 */
define('SMS_PANEL_IN', 0);
define('SMS_PANEL_OUT', 1);

/**
 * Implements hook_perm().
 */
function sms_panel_perm() {
  return array(
    'administer sms panel',
    'send sms message',
    'view sms message',
    'delete sms message',
    'view outgoing message list',
    'view incoming message list',
  );
}

/**
 * Implements hook_sms_send_alter() to track the outgoing SMS.
 *
 * This is a temporary implementation since
 * we're using a patched version of the SMSFramework and
 * it's not available in its current 1.x branch.
 *
 * @param $outgoing
 *   An array of following data passed by reference:
 *   - number: Phone number of recipient.
 *   - message: SMS text body.
 *   - response: The response of gateway's send callback.
 * @param $op
 *   The operation type.
 */
function sms_panel_sms_send_alter(&$outgoing, $op) {
  if ($op == 'pre send' && strpos($outgoing['message'], t('confirmation')) === FALSE && !user_access('send sms message')) {
    drupal_set_message(t('You have not enough permission to send SMS messages.'), 'error', FALSE);

    // TODO: Just change the following lines!
    drupal_goto($_SERVER['HTTP_REFERER']);
    exit();
  }

  elseif ($op == 'post send' && $outgoing['response']) {
    global $user;
    $gateway = sms_default_gateway();

    // Build and save the SMS object.
    $sms = new stdClass();
    $sms->uid = $user->uid;
    $sms->timestamp = time();
    $sms->direction = SMS_PANEL_OUT;
    $sms->number = $outgoing['number'];
    $sms->message = $outgoing['message'];
    $sms->gateway = $gateway['identifier'];
    sms_save($sms);
  }
}

/**
 * Implements hook_sms_incoming().
 */
function sms_panel_sms_incoming($op, $number, $message, $options) {
  if ($op == 'post process') {
    $sms = new stdClass();
    $gateway = sms_default_gateway();

    $sms->uid = 0;
    $sms->number = $number;
    $sms->timestamp = time();
    $sms->message = $message;
    $sms->direction = SMS_PANEL_IN;
    $sms->gateway = $gateway['identifier'];
    sms_save($sms);
  }
}

/**
 * API function to simply save a sms message.
 *
 * @param $sms
 *   SMS object to be saved.
 */
function sms_save(&$sms) {
  $sms = (object) $sms;

  $sms->timestamp = $sms->timestamp ? $sms->timestamp : time();
  drupal_write_record('smses', $sms);
}

/**
 * API function to delete a sms message.
 *
 * @param $sid
 *   SMS object or identifier to be deleted.
 */
function sms_delete($sid) {
  global $user;
  $allowed = FALSE;

  if (user_access('delete sms message')) {
    $sid = is_object($sid) ? $sid->sid : $sid;
    db_query("DELETE FROM {smses} WHERE sid = %d", $sid);
    drupal_set_message(t('The SMS message logs has been successfully deleted.'), 'status', FALSE);
  }
  else {
    drupal_set_message(t('You have not enough permission to delete the SMS message.'), 'warning', FALSE);
  }
}

/**
 * API function to load a sms message from database.
 *
 * @param $params
 *   The sid of the SMS message or an array of conditions to match against.
 * @param $flush
 *   Whether to flush the internal cache.
 * @param $fields
 *   An array of database field names to retrieve.
 *
 * @return
 *   The loaded SMS object or an array of SMS objects or FALSE on fail.
 *
 * @todo
 *   Extend to be able to match other conditions.
 */
function sms_load($params = array(), $fields = array(), $flush = FALSE) {
  static $cache = array();

  // Flush the internal cache, if set so.
  if ($flush) {
    $cache = array();
  }

  // Check for cache availablity or build the query.
  $arguments = array();
  if (is_numeric($params)) {
    if (isset($cache[$params])) {
      return (object) $cache[$params];
    }
    $conditions = 'sid = %d';
    $arguments[] = $params;
  }
  elseif (is_array($params)) {
    // Convert array formatted parameters into a query.
    foreach ($params as $key => $value) {
      if ($key == 'period' && isset($value['from'])) {
        $conditions[] = '(timestamp BETWEEN %d AND %d)';
        $arguments[] = $value['from'];
        $arguments[] = isset($value['to']) ? $value['to'] : time();
      }
      else {
        $conditions[] = db_escape_table($key) . " = '%s'";
        $arguments[] = $value;
      }
    }
    $conditions = implode(' AND ', $conditions);
  }
  else {
    return FALSE;
  }

  // Preparing fields to be retrieved.
  if (empty($fields) || !is_array($fields)) {
    $fields = '*';
  }
  else {
    $fields = implode(',', $fields);
  }

  // Get and iterate through the results.
  $sms = array();
  $conditions = $conditions ? $conditions : 'TRUE';
  $results = db_query("SELECT $fields FROM {smses} WHERE $conditions", $arguments);

  while ($sms_object = db_fetch_object($results)) {
    $sms[] = $sms_object;
  }
  unset($results);

  // Remove the array wrapper, if there were only one result.
  $count = count($sms);
  if ($count == 1) {
    $sms = $sms[0];
  }
  elseif (!$count) {
    return FALSE;
  }

  // Cache it.
  $cache[$sms->sid] = $sms;

  return $sms;
}

/**
 * Helper function to build a title for a SMS message.
 *
 * @param $sid
 *   SMS identifier or object.
 *
 * @return
 *   SMS message title.
 */
function sms_title($sid) {
  if (is_object($sid)) {
    $sid = $sid->sid;
  }
  return t('SMS Message') . ' #' . $sid;
}

