<?php
// $Id$

/**
 * @file
 * Contains necessary hook implementations, callbacks & helpers.
 *
 * Could not find a reliable scheduler API, job_scheduler.module looks promising
 * but it's not stable yet. So this module is "temporary" implementing the logic
 * on top of Job Queue API.
 *
 * @todo
 * Either implement a scheduler API and remove the built-in logic,
 * or generalize and breakout into a separate API module.
 */

/**
 * Defines script request time.
 */
define('SMS_PANEL_DISPATCHER_SCHEDULE_TIME', time());

/**
 * Implements hook_sms_panel_bulk_dispatcher().
 */
function sms_panel_dispatcher_schedule_sms_panel_bulk_dispatcher() {
  $dispatchers = array();

  $dispatchers['schedule'] = array(
    'name' => t('Schedule to be sent in future (Using <a href="!link">Job Queue API</a>)',
      array('!link' => url('admin/reports/job_queue'))
    ),
    'callback' => 'sms_panel_dispatcher_schedule',
  );

  return $dispatchers;
}

/**
 * Implements hook_form_ID_alter().
 *
 * Yeah! That's so damn long, I know. With 64M of memory,
 * we're able to create a function with about 2 million chars name!
 * I just found that, take it easy ;)
 */
function sms_panel_dispatcher_schedule_form_sms_panel_bulk_form_compose_alter(&$form, $form_state) {
  // Inject job scheduler settings fields.
  _sms_panel_dispatcher_schedule_fields($form['dispatch_method']);

  // Attach additional validation callback.
  $form['#validate'][] = 'sms_panel_dispatcher_schedule_validate';
}

/**
 * Validation callback for SMS Panel Bulk Compose form.
 */
function sms_panel_dispatcher_schedule_validate($form, &$form_state) {
  if ($form_state['values']['sms_panel_bulk_dispatch_method'] != 'schedule') {
    return;
  }

  // Check start date set, looks unnecessary.
  if (empty($form_state['values']['sms_panel_dispatcher_schedule_start_date']) || empty($form_state['values']['sms_panel_dispatcher_schedule_start_hour'])) {
    form_set_error('sms_panel_dispatcher_schedule_start_date', t('Since you choose the scheduled dispatch method, you need to specify both start date and time.'));
    form_set_error('sms_panel_dispatcher_schedule_start_hour', t('Arrrrrgh!'));
    array_pop($_SESSION['messages']['error']);
  }

  // Check start date validity.
  $start_timestamp = _sms_panel_dispatcher_schedule_mktime(
    $form_state['values']['sms_panel_dispatcher_schedule_start_date'],
    $form_state['values']['sms_panel_dispatcher_schedule_start_hour']
  );
  // Decline less than 5mins schedules.
  if ($start_timestamp <= SMS_PANEL_DISPATCHER_SCHEDULE_TIME + 360) {
    form_set_error('sms_panel_dispatcher_schedule_start_date', t('Start date and time is not valid.'));
    form_set_error('sms_panel_dispatcher_schedule_start_hour', t('Arrrrrgh!'));
    array_pop($_SESSION['messages']['error']);
  }

  // If it's a priodic cron job.
  if ($form_state['values']['sms_panel_dispatcher_schedule_periodic']) {
    // Check ferequency.
    if (empty($form_state['values']['sms_panel_dispatcher_schedule_every']) ||
        $form_state['values']['sms_panel_dispatcher_schedule_every_unit'] == 0 ||
        !ctype_digit($form_state['values']['sms_panel_dispatcher_schedule_every'])) {
      // Setting error on multiple fields.
      form_set_error('sms_panel_dispatcher_schedule_every_unit', t('Since you marked this as a periodic job, you need to to set a valid period ferequency.'));
      form_set_error('sms_panel_dispatcher_schedule_every', t('Arrrrrgh!'));
      array_pop($_SESSION['messages']['error']);
    }
    // Calculate ferequency timestamp.
    else {
      $freq_timestamp = (int) $form_state['values']['sms_panel_dispatcher_schedule_every'] * $form_state['values']['sms_panel_dispatcher_schedule_every_unit'];
    }

    // And check expiry.
    if ($form_state['values']['sms_panel_dispatcher_schedule_expiry']) {
      // Check expiry date set, looks unnecessary.
      if (empty($form_state['values']['sms_panel_dispatcher_schedule_expiry_date']) || empty($form_state['values']['sms_panel_dispatcher_schedule_expiry_hour'])) {
        // Setting error on multiple fields.
        form_set_error('sms_panel_dispatcher_schedule_expiry_date', t('Since you choose to expire the periodic job at a specific time, you need to specify both expiry date and time.'));
        form_set_error('sms_panel_dispatcher_schedule_expiry_hour', t('Arrrrrgh!'));
        array_pop($_SESSION['messages']['error']);
      }
      // Check expiry date validity.
      $expiry_timestamp = _sms_panel_dispatcher_schedule_mktime(
        $form_state['values']['sms_panel_dispatcher_schedule_expiry_date'],
        $form_state['values']['sms_panel_dispatcher_schedule_expiry_hour']
      );
      // Decline less than 5mins expiries,
      // invalid start/expiry timestamp ranges,
      // and an expiry timestamp less than the specified ferequency+start.
      if ($expiry_timestamp <= SMS_PANEL_DISPATCHER_SCHEDULE_TIME + 360 ||
          $expiry_timestamp <= $start_timestamp + 360 ||
          $expiry_timestamp <= $start_timestamp + $freq_timestamp) {
        form_set_error('sms_panel_dispatcher_schedule_expiry_date', t('Expiry date is not valid.'));
        form_set_error('sms_panel_dispatcher_schedule_expiry_hour', t('Arrrrrgh!'));
        array_pop($_SESSION['messages']['error']);
      }
    }
  }
}

/**
 * Dispatch callback of schedule dispatcher.
 *
 * @param $numbers
 *   An array of valid numbers to send $message to.
 * @param $message
 *   SMS text to be sent.
 * @param $data
 *   If called via a submission form callback,
 *   $data contains form's $form_state['values'].
 */
function sms_panel_dispatcher_schedule($numbers, $message, $data = array()) {
  $frequency = $expiry = FALSE;
  $start = _sms_panel_dispatcher_schedule_mktime(
    $data['sms_panel_dispatcher_schedule_start_date'],
    $data['sms_panel_dispatcher_schedule_start_hour']
  );

  // Calculate ferequency timestamp, if it's a periodic job.
  if ($data['sms_panel_dispatcher_schedule_periodic']) {
    $frequency = (int) $data['sms_panel_dispatcher_schedule_every'] * $data['sms_panel_dispatcher_schedule_every_unit'];
  }

  // Calculate expiry timestamp, if it has a expiry date.
  if ($data['sms_panel_dispatcher_schedule_expiry']) {
    $expiry = _sms_panel_dispatcher_schedule_mktime(
      $data['sms_panel_dispatcher_schedule_expiry_date'],
      $data['sms_panel_dispatcher_schedule_expiry_hour']
    );
  }

  // Push a job to the cron queue per number.
  foreach ($numbers as $number) {
    job_queue_add(
      '_sms_panel_dispatcher_schedule',
      t('Scheduled SMS Send to %number, starting at %start.', array(
      	'%number' => $number,
        '%start' => format_date($start, 'small')
      )),
      array($number, $message, $start, $ferequency, $expiry)
    );
  }

  // Notify.
  drupal_set_message(t('!count jobs has been scheduled to be sent at %start. You might want to <a href="!link">browse the queue</a>.',
    array(
    	'!count' => count($numbers),
    	'%start' => format_date($start, 'large'),
      '!link' => url('admin/reports/job_queue'),
   	)
  ));
}

/**
 * Cron queued helper function, implements scheduler logic per job.
 *
 * @param $number
 *   A number to send the $message to.
 * @param $message
 *   SMS text to be sent.
 * @param $start
 *   Job start timestamp.
 * @param $frequency
 *   Job frequency timestamp.
 * @param $expiry
 *   Job expiry timestamp.
 *
 * @see job_queue_add()
 * @see sms_panel_dispatcher_schedule()
 * @see _sms_panel_dispatcher_schedule_expire()
 *
 * @todo Checkout the elysia_cron API.
 */
function _sms_panel_dispatcher_schedule($number, $message, $start, $frequency, $expiry) {
  // Ah, early to wakeup, zZzzZ!
  if (SMS_PANEL_DISPATCHER_SCHEDULE_TIME < $start) {
    // Requeue the job.
    job_queue_add(
      '_sms_panel_dispatcher_schedule',
      t('Scheduled SMS Send to %number, starting at %start. (requeued)', array(
      	'%number' => $number,
        '%start' => format_date($start, 'small')
      )),
      array($number, $message, $start, $ferequency, $expiry)
    );
    return;
  }

  // TODO: Really?
  // As ever late, delete expired jobs.
  if ($expire && $start >= $expire) {
    $count = _sms_panel_dispatcher_schedule_expire(func_get_args());
    if ($count) {
      // Notify.
      drupal_set_message(t('Removed !count expired scheduled SMS sending jobs.',
        array('!count' => $count)
      ));
      watchdog('cron', 'Removed !count expired scheduled SMS sending jobs.',
        array('!count' => $count)
      , WATCHDOG_NOTICE);
    }
    return;
  }

  // Lucky on time!
  sms_send($number, $message);
  if ($frequency) {
    // Queue the next job.
    job_queue_add(
      '_sms_panel_dispatcher_schedule',
      t('Scheduled SMS Send to %number, starting at %start.', array(
      	'%number' => $number,
        '%start' => format_date($start + $frequency, 'small')
      )),
      array($number, $message, $start, $ferequency, $expiry)
    );
  }
}

/**
 * Helper function to remove expired scheduled SMS sending job.
 *
 * @param $args
 *   Array of job callback arguments as
 *   per required for job_queue_add().
 * @param $callback
 *   Job callback name.
 *
 * @return
 *   Number of removed jobs.
 *
 * @see job_queue_add()
 * @see _sms_panel_dispatcher_schedule().
 */
function _sms_panel_dispatcher_schedule_expire($args = array(), $callback = '_sms_panel_dispatcher_schedule') {
  db_query("DELETE FROM {job_queue}
            WHERE function = '%s'
            AND arguments = '%s'
            AND created < %d", $callback, serialize($args), SMS_PANEL_DISPATCHER_SCHEDULE_TIME);
  return db_affected_rows();
}

/**
 * Helper function to inject required scheduler settings fields to a form array.
 *
 * @param $form
 *   Form (sub)array.
 */
function _sms_panel_dispatcher_schedule_fields(&$form) {
  // Include CTools dependency API.
  ctools_include('dependent');

  // Scheduler settings wrapper.
  $form['scheduler_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Schedule Settings'),
    '#collapsible' => TRUE,
    // CTools dependent API compliant.
    '#input' => TRUE,
    '#process' => array('ctools_dependent_process'),
    '#id' => 'sms-panel-scheduler-settings',
    '#prefix' => '<div id="sms-panel-scheduler-settings-wrapper">',
    '#suffix' => '</div>',
    '#dependency' => array(
      'radio:sms_panel_bulk_dispatch_method' => array('schedule'),
    ),
  );

  // First run.
  $form['scheduler_settings']['start'] = array(
    '#type' => 'fieldset',
    '#title' => t('First Run'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['scheduler_settings']['start']['sms_panel_dispatcher_schedule_start_hour'] = array(
    '#type' => 'select',
    '#title' => t('Hour'),
    '#description' => t("Specify the time in which you wish to perform this job. Not accurate enough? ya, It's cron baby!"),
    '#default_value' => 17,
    '#options' => _sms_panel_dispatcher_schedule_hours(),
  );

  $form['scheduler_settings']['start']['sms_panel_dispatcher_schedule_start_date'] = array(
    '#type' => 'date',
    '#title' => t('Date'),
    '#description' => t('Specify the date in which you wish to perform this job.'),
    // Alter the year range.
    '#after_build' => array('_sms_panel_dispatcher_schedule_date_after_build'),
  );

  // Periodic runs.
  $form['scheduler_settings']['periodic'] = array(
    '#type' => 'fieldset',
    '#title' => t('Priodic Runs'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['scheduler_settings']['periodic']['sms_panel_dispatcher_schedule_periodic'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check if you wish to keep this as a periodical cron job.'),
    '#description' => t('By checking this option the job will be performed on periodical basis.'),
    '#default_value' => 0,
    // CTools dependent API compliant.
    '#id' => 'sms-panel-scheduler-periodic',
  );

  $form['scheduler_settings']['periodic']['sms_panel_dispatcher_schedule_every'] = array(
    '#type' => 'textfield',
    '#title' => t('Repeat the job every'),
    '#description' => t('Please enter a valid integer and then specify its time unit below.'),
    // CTools dependent API compliant.
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('sms-panel-scheduler-periodic' => array(TRUE)),
  );

  $form['scheduler_settings']['periodic']['sms_panel_dispatcher_schedule_every_unit'] = array(
    '#type' => 'radios',
    '#title' => t('Time unit'),
    '#description' => t('Please choose the preiod time unit.'),
    '#default_value' => 0,
    '#options' => array(
      0 => t('None'),
      3600 => t('Hour(s)'),
      86400 => t('Day(s)'),
      2592000 => t('Month(s)'),
      31104000 => t('Year(s)'),
    ),
    // CTools dependent API compliant.
    '#id'=>'sms-panel-scheduler-every-unit',
    '#prefix' => '<div id="sms-panel-scheduler-every-unit-wrapper">',
    '#suffix' => '</div>',
    '#process' => array('expand_radios', 'ctools_dependent_process'),
    '#dependency' => array('sms-panel-scheduler-periodic' => array(TRUE)),
  );

  // Runs expiry time.
  $form['scheduler_settings']['periodic']['expiry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Expiry Time'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    // CTools dependent API compliant.
    '#input' => TRUE,
    '#process' => array('ctools_dependent_process'),
    '#id' => 'sms-panel-scheduler-expiry-settings',
    '#prefix' => '<div id="sms-panel-scheduler-expiry-settings-wrapper">',
    '#suffix' => '</div>',
    '#dependency' => array('sms-panel-scheduler-periodic' => array(TRUE)),
  );

  $form['scheduler_settings']['periodic']['expiry']['sms_panel_dispatcher_schedule_expiry'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check if you wish to expire this periodical cron job at a specific time.'),
    '#description' => t('By checking this option the job will be deleted from the cron queue at the specified time.'),
    '#default_value' => 0,
    // CTools dependent API compliant.
    '#id' =>'sms-panel-scheduler-expiry',
  );

  $form['scheduler_settings']['periodic']['expiry']['sms_panel_dispatcher_schedule_expiry_hour'] = array(
    '#type' => 'select',
    '#title' => t('Expiry Hour'),
    '#default_value' => 17,
    '#options' => _sms_panel_dispatcher_schedule_hours(),
    // CTools dependent API compliant.
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('sms-panel-scheduler-expiry' => array(TRUE)),
  );

  $form['scheduler_settings']['periodic']['expiry']['sms_panel_dispatcher_schedule_expiry_date'] = array(
    '#type' => 'date',
    '#title' => t('Expiry Date'),
    // Alter the year range.
    '#after_build' => array('_sms_panel_dispatcher_schedule_date_after_build'),
    // CTools dependent API compliant.
    '#process' => array('expand_date', 'ctools_dependent_process'),
    '#dependency' => array('sms-panel-scheduler-expiry' => array(TRUE)),
  );
}

/**
 * Date field after_build callback to workaround the date field stupid limitation.
 *
 * @param $form_element
 *   Date field element.
 * @param $form_state
 *   State of the form array.
 *
 * @return
 *   Updated $form_element.
 *
 * @see expand_date()
 */
function _sms_panel_dispatcher_schedule_date_after_build($form_element, &$form_state) {
  $now = format_date(time(), 'custom', 'Y');
  $form_element['year']['#options'] = drupal_map_assoc(range($now, $now + 5));
  return $form_element;
}

/**
 * Helper function aasdasd a timestamp from date and time form elements.
 *
 * @param $date_element
 *   An array of form date element:
 *   - year
 *   - month
 *   - day
 *
 * @param $time_element
 *   24-format hour integer.
 *
 * @return
 *   Corresponding timestamp.
 */
function _sms_panel_dispatcher_schedule_mktime($date_element, $time_element = 0) {
  return mktime(
    (int) $time_element, 0, 0,
    (int) $date_element['month'],
    (int) $date_element['day'],
    (int) $date_element['year']
  );
}

/**
 * Helper function to return a translatable array of scheduling hours.
 *
 * @return
 *   A translatable array of hours.
 */
function _sms_panel_dispatcher_schedule_hours() {
  return array(
    1  => t('01:00 AM'),
    2  => t('02:00 AM'),
    3  => t('03:00 AM'),
    4  => t('04:00 AM'),
    5  => t('05:00 AM'),
    6  => t('06:00 AM'),
    7  => t('07:00 AM'),
    8  => t('08:00 AM'),
    9  => t('09:00 AM'),
    10 => t('10:00 AM'),
    11 => t('11:00 AM'),
    12 => t('12:00 PM'),
    13 => t('01:00 PM'),
    14 => t('02:00 PM'),
    15 => t('03:00 PM'),
    16 => t('04:00 PM'),
    17 => t('05:00 PM'),
    18 => t('06:00 PM'),
    19 => t('07:00 PM'),
    20 => t('08:00 PM'),
    21 => t('09:00 PM'),
    22 => t('10:00 PM'),
    23 => t('11:00 PM'),
    24 => t('12:00 AM'),
  );
}

