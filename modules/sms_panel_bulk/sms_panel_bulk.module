<?php
// $Id$

/**
 * @file
 * SMS Panel Bulk hooks implementations and helper functions.
 *
 * @todo
 * Fix views handlers.
 */

/**
 * Implements hook_perm().
 */
function sms_panel_bulk() {
  return array(
    'send bulk sms messages',
    'delete bulk sms messages'
  );
}

/**
 * Implements hook_menu().
 */
function sms_panel_bulk_menu() {
  $items = array();

  $items['admin/smsframework/panel/compose/bulk'] = array(
    'title' => 'Advanced',
    'Description' => 'Compose a new bulk SMS message.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_panel_bulk_form_compose'),
    'access arguments' => array('send bulk sms message'),
    'file' => 'sms_panel_bulk.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function sms_panel_bulk_theme() {
  return array(
    'sms_panel_bulk_form_compose' => array(
      'argument' => array('form' => NULL),
      'file' => 'sms_panel_bulk.inc',
    ),
  );
}

/**
 * Implements hook_job_queue_functions().
 */
function sms_panel_bulk_job_queue_functions() {
  $functions = array();

  $functions['sms_send'] = array(
    'title' => t('Bulk SMS Send'),
  );

  return $functions;
}

/**
 * Implements hook_sms_panel_bulk_dispatcher().
 */
function sms_panel_bulk_sms_panel_bulk_dispatcher() {
  $dispatchers = array();

  $dispatchers['regular'] = array(
    'name' => t('Regular (Not recommended)'),
    'callback' => 'sms_panel_bulk_dispatcher_regular',
  );

  $dispatchers['batch'] = array(
    'name' => t('Batch Operation (recommended)'),
    'callback' => 'sms_panel_bulk_dispatcher_batch',
  );

  $dispatchers['cron'] = array(
    'name' => t('Dispatch on cron (Requires <a href="!link">Job Queue</a>)',
      array('!link' => 'http://drupal.org/project/job_queue')
    ),
    'callback' => 'sms_panel_bulk_dispatcher_cron',
  );

  return $dispatchers;
}

/**
 * Implements hook_views_api().
 */
function sms_panel_bulk_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'sms_panel_bulk') . '/views',
  );
}

/**
 * API function to save a bulk sms send log.
 *
 * @param $bulk
 *   SMS object to be saved.
 */
function sms_panel_bulk_save(&$bulk) {
  $bulk = (object) $bulk;

  // Check if the timestamp is set.
  if (!$bulk->timestamp) {
    $bulk->timestamp = time();
  }
  // Check whether the SMS gateway is set or not.
  if (!$bulk->gateway) {
    $gateway = sms_default_gateway();
    $bulk->gateway = $gateway['identifier'];
  }
  // Check if the sender is set.
  if (!$bulk->uid) {
    global $user;
    $bulk->uid = $user->uid;
  }
  // Check recipients format.
  if (is_array($bulk->recipients)) {
    $bulk->recipients = serialize($bulk->recipients);
  }

  drupal_write_record('sms_panel_bulk', $bulk);
}

/**
 * API function to dispatch bulk SMS messages.
 *
 * @param $numbers
 *   An array of valid numbers to send $message to.
 * @param $message
 *   SMS text to be sent.
 * @param $note
 *   Bulk send note to be logged.
 * @param $dispatcher
 *   Indicates dispatch method.
 * @param $log
 *   Whether to log the dispatch or not.
 */
function sms_panel_bulk_dispatch($numbers, $message, $note = '', $dispatcher = 'batch', $log = TRUE) {
  // Get available dispatchers.
  $dispatchers = _sms_panel_bulk_dispatcher_build();
  // Check if the requested dispatched exists.
  if (!_sms_panel_bulk_dispatcher_exists($dispatcher, $dispatchers)) {
    drupal_set_message(t('There were a problem finding the requested dispatcher.'), 'error');
    return;
  }

  // Call the proper dispatch callback.
  $dispatchers[$dispatcher]['callback']($numbers, $message);

  // And log the operation, if requested so.
  if ($log) {
    $bulk = new stdClass();
    $bulk->note = $note;
    $bulk->message = $message;
    $bulk->recipients = serialize($numbers);
    sms_panel_bulk_save($bulk);
  }
}

/**
 * Dispatch callback of regular dispatcher.
 *
 * @param $numbers
 *   An array of valid numbers to send $message to.
 * @param $message
 *   SMS text to be sent.
 *
 * @see sms_panel_bulk_sms_panel_bulk_dispatcher()
 */
function sms_panel_bulk_dispatcher_regular($numbers, $message) {
  $fail = 0;
  foreach ($numbers as $number) {
    if (!sms_send($number, $message)) {
      ++$fail;
    }
  }

  // Notify.
  if (!$fail) {
    drupal_set_message(t('@count SMS messages has been sent successfully.',
      array('@count' => count($numbers))
    ));
  }
  // $fail times failed.
  else {
    drupal_set_message(t('@count SMS messages has been failed to be sent. Error details has been logged.',
      array('@count' => $fail)
    ));
  }
}

/**
 * Dispatch callback of batch dispatcher.
 *
 * @param $numbers
 *   An array of valid numbers to send $message to.
 * @param $message
 *   SMS text to be sent.
 * @param $batch_process
 *   Whether to manually process the operation or not.
 *
 * @see sms_panel_bulk_sms_panel_bulk_dispatcher()
 */
function sms_panel_bulk_dispatcher_batch($numbers, $message, $batch_process = FALSE) {
  $batch = array(
    'operations' => array(),
    'title' => t('Bulk SMS Sending...'),
    'init_message' => t('Dispatching bulk SMS send operation...'),
    'error_message' => t('An error occured while sending bulk SMS messages.'),
    'progress_message' => t('@current out of @total messages has been sent, @remaining remaining. (@percentage%)'),
  );

  // Attach sms_send operation per $number.
  foreach ($numbers as $number) {
    $batch['operations'][] = array('sms_send',
      array($number, $message)
    );
  }

  // Set & process.
  batch_set($batch);
  if ($batch_process) {
    batch_process();
  }
}

/**
 * Dispatch callback of cron queue dispatcher.
 *
 * @param $numbers
 *   An array of valid numbers to send $message to.
 * @param $message
 *   SMS text to be sent.
 *
 * @see sms_panel_bulk_sms_panel_bulk_dispatcher()
 */
function sms_panel_bulk_dispatcher_cron($numbers, $message) {
  // Add a cron job per each $number.
  foreach ($numbers as $number) {
    // TODO: Add a fake wrapper function to be periorized properly.
    job_queue_add(
      'sms_send',
      t('Send a SMS message to %number.', array('%number' => $number)),
      array($number, $message)
    );
  }

  // Notify user.
  drupal_set_message(t('@count SMS sending jobs has been queued to be sent on forthcoming cron runs. You might want to <a href="!link">run cron manually</a>.',
    array('@count' => count($numbers), '!link' => url('admin/reports/status/run-cron'))
  ));
}

/**
 * Static cache helper to build a list of available dispatchers.
 *
 * @param $type
 *   Type of return list.
 *   - all: An array All dispatchers and their info.
 *   - names: A identifier keyed array of dispatcher names.
 * @param $reset
 *   Whether to reset built-in static cache.
 *
 * @return
 *   A $type formed array of dispatchers.
 */
function _sms_panel_bulk_dispatcher_build($type = 'all', $reset = FALSE) {
  static $dispatchers = array();

  if (empty($dispatchers) || $reset) {
    // Get available dispatchers.
    $dispatchers_defined = module_invoke_all('sms_panel_bulk_dispatcher');
    // Drop invalid dispatchers.
    foreach ($dispatchers_defined as $identifier => $info) {
      if (isset($info['callback']) && function_exists($info['callback'])) {
        $dispatchers['all'][$identifier] = $info;
        $dispatchers['names'][$identifier] = $info['name'];
      }
    }
  }

  return $dispatchers[$type];
}

/**
 * Helper function to check whether a dispatcher defined.
 *
 * @param $dispatcher
 *   Dispatcher identifier.
 * @param $dispatchers
 *   Optional array of previously built dispatchers.
 *
 * @return
 *   Boolean value.
 */
function _sms_panel_bulk_dispatcher_exists($dispatcher, $dispatchers = FALSE) {
  $dispatchers = $dispatchers ? $dispatchers : _sms_panel_bulk_dispatcher_build('names');
  return isset($dispatchers[$dispatcher]);
}

function sms_panel_bulk_init() {

}

